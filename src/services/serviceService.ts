import { supabase } from '@/integrations/supabase/client';
import { Service, ServiceFormData } from '../types/database';

// ============================================
// GERENCIAMENTO DE SERVI√áOS
// ============================================

export const serviceService = {
  // Criar novo servi√ßo
  async createService(data: ServiceFormData): Promise<Service> {
    console.log('üîç DEBUG - serviceService.createService recebeu:', data);
    
    const { data: service, error } = await supabase
      .from('services')
      .insert({
        name: data.name,
        price: data.price,
        duration: data.duration,
        available: data.available ?? true
      })
      .select()
      .single();

    console.log('üîç DEBUG - Resultado da cria√ß√£o:', { service, error });

    if (error) {
      console.error('Erro ao criar servi√ßo:', error);
      throw new Error(`Erro ao criar servi√ßo: ${error.message}`);
    }

    return service;
  },

  // Listar todos os servi√ßos
  async getAllServices(): Promise<Service[]> {
    const { data: services, error } = await supabase
      .from('services')
      .select('*')
      .order('name', { ascending: true });

    if (error) {
      console.error('Erro ao buscar servi√ßos:', error);
      throw new Error(`Erro ao buscar servi√ßos: ${error.message}`);
    }

    return services || [];
  },

  // Alias para compatibilidade
  async getServices(): Promise<Service[]> {
    const { data: services, error } = await supabase
      .from('services')
      .select('*')
      .order('name', { ascending: true });

    if (error) {
      console.error('Erro ao buscar servi√ßos:', error);
      throw new Error(`Erro ao buscar servi√ßos: ${error.message}`);
    }

    return services || [];
  },

  // Buscar servi√ßo por ID
  async getServiceById(id: string): Promise<Service | null> {
    const { data: service, error } = await supabase
      .from('services')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return null; // Servi√ßo n√£o encontrado
      }
      console.error('Erro ao buscar servi√ßo:', error);
      throw new Error(`Erro ao buscar servi√ßo: ${error.message}`);
    }

    return service;
  },

  // Atualizar servi√ßo
  async updateService(id: string, data: Partial<ServiceFormData>): Promise<Service> {
    console.log('üîç DEBUG - serviceService.updateService recebeu:', { id, data });
    
    const { data: service, error } = await supabase
      .from('services')
      .update({
        name: data.name,
        price: data.price,
        duration: data.duration,
        available: data.available
      })
      .eq('id', id)
      .select()
      .single();
      
    console.log('üîç DEBUG - Resultado da atualiza√ß√£o:', { service, error });

    if (error) {
      console.error('Erro ao atualizar servi√ßo:', error);
      throw new Error(`Erro ao atualizar servi√ßo: ${error.message}`);
    }

    return service;
  },

  // Deletar servi√ßo
  async deleteService(id: string): Promise<void> {
    const { error } = await supabase
      .from('services')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('Erro ao deletar servi√ßo:', error);
      throw new Error(`Erro ao deletar servi√ßo: ${error.message}`);
    }
  },

  // Buscar servi√ßos dispon√≠veis
  async getAvailableServices(): Promise<Service[]> {
    const { data: services, error } = await supabase
      .from('services')
      .select('*')
      .eq('available', true)
      .order('name', { ascending: true });

    if (error) {
      console.error('Erro ao buscar servi√ßos dispon√≠veis:', error);
      throw new Error(`Erro ao buscar servi√ßos dispon√≠veis: ${error.message}`);
    }

    return services || [];
  },

  // Toggle status de disponibilidade do servi√ßo
  async toggleServiceAvailability(id: string): Promise<Service> {
    console.log('üîç DEBUG - serviceService.toggleServiceAvailability chamado para ID:', id);
    
    // Primeiro, buscar o servi√ßo atual para obter o status
    const currentService = await this.getServiceById(id);
    if (!currentService) {
      throw new Error('Servi√ßo n√£o encontrado');
    }

    // Inverter o status de disponibilidade
    const newAvailability = !currentService.available;
    console.log('üîç DEBUG - Alterando disponibilidade de', currentService.available, 'para', newAvailability);
    
    const { data: service, error } = await supabase
      .from('services')
      .update({ available: newAvailability })
      .eq('id', id)
      .select()
      .single();
      
    console.log('üîç DEBUG - Resultado do toggle:', { service, error });

    if (error) {
      console.error('Erro ao alterar status do servi√ßo:', error);
      throw new Error(`Erro ao alterar status do servi√ßo: ${error.message}`);
    }

    return service;
  }
};

export default serviceService;