// Script de teste final para campos individuais (Edge Function v90)
// Execute no console do navegador ap√≥s fazer login

async function testFinalIndividualFields() {
  console.log('üîç Teste final de campos individuais (Edge Function v90)...');
  
  // Interceptar todas as chamadas para monitorar
  const originalFetch = window.fetch;
  window.fetch = async function(...args) {
    const [url, options] = args;
    
    if (url && url.includes && url.includes('ai-webhook')) {
      console.log('\nüöÄ === CHAMADA INTERCEPTADA ===');
      
      const requestBody = options?.body ? JSON.parse(options.body) : null;
      console.log('üì§ Payload enviado:', requestBody);
      
      const response = await originalFetch.apply(this, args);
      
      // Clonar resposta para an√°lise
      const clonedResponse = response.clone();
      try {
        const responseData = await clonedResponse.json();
        console.log('\nüì• === RESPOSTA RECEBIDA ===');
        console.log('Status:', response.status);
        console.log('Success:', responseData.success);
        console.log('Processed Content:', responseData.processed_content ? 'Presente' : 'Ausente');
        console.log('Individual Fields:', responseData.individual_fields ? 'Presente' : 'Ausente');
        
        if (responseData.individual_fields) {
          console.log('üéØ Campos individuais na resposta:');
          Object.entries(responseData.individual_fields).forEach(([key, value]) => {
            console.log(`  ${key}: ${value}`);
          });
        } else {
          console.log('‚ö†Ô∏è PROBLEMA: Nenhum campo individual na resposta!');
        }
      } catch (e) {
        console.error('‚ùå Erro ao fazer parse da resposta:', e);
      }
      
      return response;
    }
    
    return originalFetch.apply(this, args);
  };
  
  console.log('‚úÖ Monitoramento ativo.');
  console.log('üìã Agora execute o processamento de IA no sistema.');
  console.log('üìã Os logs da Edge Function v90 mostrar√£o detalhes sobre a extra√ß√£o de campos.');
}

// Fun√ß√£o para testar diretamente
async function testDirectEdgeFunction() {
  console.log('üß™ Testando Edge Function v90 diretamente...');
  
  const testPayload = {
    content: '',
    type: 'exam_result',
    selectedModelTitle: 'Ultrassom Obst√©trico',
    IG: '32 semanas',
    BCF: '140 bpm',
    peso_fetal: '1800g',
    apresentacao: 'Cef√°lica',
    placenta: 'Anterior',
    liquido_amniotico: 'Normal'
  };
  
  console.log('üì§ Enviando:', testPayload);
  
  try {
    const { data, error } = await window.supabase.functions.invoke('ai-webhook', {
      body: testPayload
    });
    
    if (error) {
      console.error('‚ùå Erro:', error);
      return;
    }
    
    console.log('\nüì• Resposta completa:', data);
    
    // Analisar resposta
    if (data.success) {
      console.log('‚úÖ Processamento bem-sucedido');
      
      if (data.processed_content) {
        console.log('üìÑ Resultado Final presente');
      }
      
      if (data.individual_fields) {
        console.log('üéØ Campos individuais presentes:', Object.keys(data.individual_fields));
        console.log('üìä Detalhes dos campos:');
        Object.entries(data.individual_fields).forEach(([key, value]) => {
          console.log(`  ${key}: ${value}`);
        });
        
        return {
          success: true,
          hasIndividualFields: true,
          fieldCount: Object.keys(data.individual_fields).length,
          fields: data.individual_fields
        };
      } else {
        console.log('‚ö†Ô∏è Nenhum campo individual na resposta');
        console.log('üîç Verifique os logs da Edge Function para ver o que o N8N retornou');
        
        return {
          success: true,
          hasIndividualFields: false,
          processedContent: data.processed_content
        };
      }
    } else {
      console.log('‚ùå Processamento falhou');
      return { success: false, error: data.error };
    }
    
  } catch (err) {
    console.error('‚ùå Erro no teste:', err);
    return { success: false, error: err.message };
  }
}

// Fun√ß√£o para verificar logs da Edge Function
async function checkEdgeFunctionLogs() {
  console.log('üìã Para verificar os logs da Edge Function:');
  console.log('1. Acesse o Supabase Dashboard');
  console.log('2. V√° em Edge Functions ‚Üí ai-webhook');
  console.log('3. Clique em "Logs" para ver os detalhes');
  console.log('4. Procure por "=== DEBUG CAMPOS INDIVIDUAIS ==="');
  console.log('');
  console.log('Os logs mostrar√£o:');
  console.log('- Campos din√¢micos enviados');
  console.log('- Dados brutos do N8N');
  console.log('- Campos individuais extra√≠dos');
  console.log('- Se cada campo esperado foi encontrado no N8N');
}

// Fun√ß√£o para diagnosticar problemas
function diagnoseProblem() {
  console.log('üîç Diagn√≥stico de problemas:');
  console.log('');
  console.log('Se os campos individuais n√£o aparecem:');
  console.log('');
  console.log('1. ‚ùì N8N n√£o retorna campos individuais:');
  console.log('   - Verifique se o workflow N8N est√° configurado para retornar campos separados');
  console.log('   - O N8N deve retornar um JSON com campos como: IG, BCF, peso_fetal, etc.');
  console.log('');
  console.log('2. ‚ùì Edge Function n√£o extrai campos:');
  console.log('   - Verifique os logs da Edge Function v90');
  console.log('   - Procure por "=== DEBUG CAMPOS INDIVIDUAIS ==="');
  console.log('   - Veja se "Dados brutos do N8N" cont√©m os campos esperados');
  console.log('');
  console.log('3. ‚ùì Frontend n√£o processa campos:');
  console.log('   - Verifique se aparecem logs do useAtendimentoHelpers');
  console.log('   - Procure por "üéØ [useAtendimentoHelpers] Processando campos individuais"');
  console.log('   - Verifique se handleDynamicFieldsChange √© chamado');
  console.log('');
  console.log('4. ‚ùì Campos n√£o s√£o aplicados na UI:');
  console.log('   - Verifique se setDynamicFields est√° atualizando o estado');
  console.log('   - Verifique se os campos est√£o sendo re-renderizados');
}

// Fun√ß√£o para simular resposta correta do N8N
function simulateCorrectN8NResponse() {
  console.log('üé≠ Resposta correta esperada do N8N:');
  
  const correctResponse = {
    processed_content: 'Exame de ultrassom obst√©trico realizado em gestante de 32 semanas. Feto √∫nico, vivo, em apresenta√ß√£o cef√°lica. Batimentos card√≠acos fetais normais (140 bpm). Peso fetal estimado em 1800g, adequado para idade gestacional. Placenta anterior com grau de matura√ß√£o normal. Volume de l√≠quido amni√≥tico dentro da normalidade.',
    IG: '32 semanas - Idade gestacional compat√≠vel com desenvolvimento fetal adequado',
    BCF: '140 bpm - Frequ√™ncia card√≠aca fetal normal, ritmo regular',
    peso_fetal: '1800g - Peso estimado dentro da normalidade para IG atual',
    apresentacao: 'Cef√°lica - Apresenta√ß√£o fetal adequada para o parto',
    placenta: 'Anterior - Localiza√ß√£o e grau de matura√ß√£o normais',
    liquido_amniotico: 'Normal - Volume de l√≠quido amni√≥tico adequado (ILA normal)'
  };
  
  console.log('üìä Estrutura JSON esperada:', correctResponse);
  console.log('');
  console.log('üîë Pontos importantes:');
  console.log('- O N8N deve retornar um objeto JSON (n√£o string)');
  console.log('- Deve ter "processed_content" para o resultado final');
  console.log('- Deve ter campos individuais com os mesmos nomes enviados');
  console.log('- Cada campo deve ter uma resposta espec√≠fica e detalhada');
}

console.log('üöÄ Scripts dispon√≠veis:');
console.log('testFinalIndividualFields() - Ativa monitoramento completo');
console.log('testDirectEdgeFunction() - Testa Edge Function v90 diretamente');
console.log('checkEdgeFunctionLogs() - Instru√ß√µes para verificar logs');
console.log('diagnoseProblem() - Diagn√≥stico de problemas');
console.log('simulateCorrectN8NResponse() - Mostra resposta correta esperada');

// Auto-ativar monitoramento
if (typeof window !== 'undefined' && window.supabase) {
  testFinalIndividualFields();
}