// Script para testar o envio do modelo de exame selecionado para o n8n
// Execute este script no console do navegador na p√°gina /atendimento/novo

console.log('üöÄ [WEBHOOK INTERCEPTOR] Script carregado!');

// Interceptar requisi√ß√µes para o webhook
let webhookRequests = [];
const originalFetch = window.fetch;

window.fetch = function(...args) {
  const [url, options] = args;
  
  // Verificar se √© uma requisi√ß√£o para o webhook do Supabase
  if (url && url.includes('ai-webhook')) {
    console.log('üéØ [WEBHOOK] Interceptando requisi√ß√£o para ai-webhook:', url);
    console.log('üéØ [WEBHOOK] Op√ß√µes da requisi√ß√£o:', options);
    
    // Verificar o corpo da requisi√ß√£o
    if (options && options.body) {
      console.log('üéØ [WEBHOOK] Tipo do corpo:', typeof options.body);
      console.log('üéØ [WEBHOOK] Corpo da requisi√ß√£o:', options.body);
      
      // Se for string (JSON), tentar parsear
      if (typeof options.body === 'string') {
        try {
          const parsedBody = JSON.parse(options.body);
          console.log('üéØ [WEBHOOK] Corpo parseado:', parsedBody);
          
          // Verificar se selectedModelTitle est√° presente
          if (parsedBody.selectedModelTitle) {
            console.log('‚úÖ [WEBHOOK] selectedModelTitle encontrado:', parsedBody.selectedModelTitle);
          } else {
            console.log('‚ùå [WEBHOOK] selectedModelTitle N√ÉO encontrado no corpo JSON');
          }
          
          // Verificar campos din√¢micos
          if (parsedBody.dynamicFields) {
            console.log('‚úÖ [WEBHOOK] dynamicFields encontrado:', parsedBody.dynamicFields);
          } else {
            console.log('‚ùå [WEBHOOK] dynamicFields N√ÉO encontrado no corpo JSON');
          }
          
          // Verificar outros campos relevantes
          console.log('üìã [WEBHOOK] Campos encontrados no corpo:', Object.keys(parsedBody));
          
        } catch (e) {
          console.log('‚ùå [WEBHOOK] Erro ao parsear corpo JSON:', e);
          console.log('üìÑ [WEBHOOK] Corpo bruto:', options.body);
        }
      }
      
      // Se for FormData
      if (options.body instanceof FormData) {
        console.log('üìã [WEBHOOK] FormData detectado, extraindo dados...');
        const formDataEntries = {};
        for (let [key, value] of options.body.entries()) {
          formDataEntries[key] = value;
        }
        console.log('üìã [WEBHOOK] Dados do FormData:', formDataEntries);
        
        // Verificar selectedModelTitle
        if (formDataEntries.selectedModelTitle) {
          console.log('‚úÖ [WEBHOOK] selectedModelTitle encontrado:', formDataEntries.selectedModelTitle);
        } else {
          console.log('‚ùå [WEBHOOK] selectedModelTitle N√ÉO encontrado no FormData');
        }
      }
      
      webhookRequests.push({
        url,
        body: options.body,
        timestamp: new Date().toISOString(),
        headers: options.headers
      });
    }
  }
  
  return originalFetch.apply(this, args);
};

// Fun√ß√£o para verificar requisi√ß√µes interceptadas
function checkWebhookRequests() {
  console.log('üìä [CHECK] Total de requisi√ß√µes interceptadas:', webhookRequests.length);
  webhookRequests.forEach((req, index) => {
    console.log(`\nüìã [REQUISI√á√ÉO ${index + 1}] ===== DETALHES =====`);
    console.log('üîó URL:', req.url);
    console.log('‚è∞ Timestamp:', req.timestamp);
    console.log('üìÑ Corpo:', req.body);
    console.log('üìã [REQUISI√á√ÉO] ===== FIM DETALHES =====\n');
  });
  return webhookRequests;
}

// Fun√ß√£o para limpar requisi√ß√µes
function clearWebhookRequests() {
  webhookRequests = [];
  console.log('üßπ [CLEAR] Requisi√ß√µes limpas');
}

// Fun√ß√£o para simular sele√ß√£o de modelo e envio
async function testModelSelection() {
  console.log('üß™ [TEST] ===== INICIANDO TESTE DE SELE√á√ÉO DE MODELO =====');
  
  try {
    // Limpar requisi√ß√µes anteriores
    clearWebhookRequests();
    
    // 1. Verificar se estamos na p√°gina correta
    if (!window.location.pathname.includes('/atendimento/novo')) {
      console.error('‚ùå Navegue para /atendimento/novo primeiro');
      return;
    }
    
    // 2. Navegar para a aba de Exames
    console.log('1Ô∏è‚É£ Navegando para aba de Exames...');
    const examTab = Array.from(document.querySelectorAll('button, [role="tab"]')).find(el => 
      el.textContent && el.textContent.toLowerCase().includes('exame')
    );
    
    if (examTab) {
      examTab.click();
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log('‚úÖ Aba de Exames ativada');
    }
    
    // 3. Navegar para a aba de Resultados
    console.log('2Ô∏è‚É£ Navegando para aba de Resultados...');
    const resultTab = Array.from(document.querySelectorAll('button, [role="tab"]')).find(el => 
      el.textContent && el.textContent.toLowerCase().includes('resultado')
    );
    
    if (resultTab) {
      resultTab.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      console.log('‚úÖ Aba de Resultados ativada');
    }
    
    // 4. Procurar pelo bot√£o "Processar com IA"
    console.log('3Ô∏è‚É£ Procurando bot√£o "Processar com IA"...');
    const processButton = Array.from(document.querySelectorAll('button')).find(btn => 
      btn.textContent && btn.textContent.toLowerCase().includes('processar com ia')
    );
    
    if (!processButton) {
      console.error('‚ùå Bot√£o "Processar com IA" n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Bot√£o "Processar com IA" encontrado');
    
    // 5. Verificar se h√° um modelo selecionado
    const modelSelect = document.querySelector('select, [role="combobox"], button[role="combobox"]');
    if (modelSelect) {
      console.log('4Ô∏è‚É£ Select de modelos encontrado, verificando sele√ß√£o...');
      
      // Se for um select HTML
      if (modelSelect.tagName === 'SELECT') {
        if (modelSelect.selectedIndex <= 0) {
          console.log('‚ö†Ô∏è Nenhum modelo selecionado, selecionando o primeiro dispon√≠vel...');
          if (modelSelect.options.length > 1) {
            modelSelect.selectedIndex = 1;
            modelSelect.dispatchEvent(new Event('change', { bubbles: true }));
            await new Promise(resolve => setTimeout(resolve, 1000));
            console.log('‚úÖ Modelo selecionado:', modelSelect.options[modelSelect.selectedIndex].text);
          }
        } else {
          console.log('‚úÖ Modelo j√° selecionado:', modelSelect.options[modelSelect.selectedIndex].text);
        }
      }
    }
    
    // 6. Clicar no bot√£o "Processar com IA"
    console.log('5Ô∏è‚É£ Clicando em "Processar com IA"...');
    processButton.click();
    
    // 7. Aguardar requisi√ß√µes
    console.log('6Ô∏è‚É£ Aguardando requisi√ß√µes para webhook...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 8. Verificar resultados
    checkWebhookRequests();
    
    console.log('üß™ [TEST] ===== TESTE CONCLU√çDO =====');
    
  } catch (error) {
    console.error('‚ùå [TEST] Erro durante o teste:', error);
  }
}

console.log('üìã [INSTRU√á√ïES] Comandos dispon√≠veis:');
console.log('  - testModelSelection(): Testa a sele√ß√£o de modelo e envio');
console.log('  - checkWebhookRequests(): Verifica requisi√ß√µes interceptadas');
console.log('  - clearWebhookRequests(): Limpa requisi√ß√µes interceptadas');
console.log('');
console.log('üöÄ Execute testModelSelection() para iniciar o teste automatizado');