// Script para testar a integra√ß√£o completa da IA
// Execute no console do navegador na p√°gina /atendimento/novo

console.log('üöÄ Iniciando teste de integra√ß√£o da IA...');

async function testAIIntegration() {
  try {
    // 1. Verificar se o Supabase est√° dispon√≠vel
    console.log('1Ô∏è‚É£ Verificando Supabase...');
    if (typeof window.supabase === 'undefined') {
      console.error('‚ùå Supabase n√£o est√° dispon√≠vel no window');
      return;
    }
    console.log('‚úÖ Supabase dispon√≠vel');

    // 2. Navegar para a aba de exames
    console.log('2Ô∏è‚É£ Navegando para aba de exames...');
    const examTab = document.querySelector('[data-value="exames"]');
    if (!examTab) {
      console.error('‚ùå Aba de exames n√£o encontrada');
      return;
    }
    examTab.click();
    await new Promise(resolve => setTimeout(resolve, 500));
    console.log('‚úÖ Aba de exames ativada');

    // 3. Navegar para resultados
    console.log('3Ô∏è‚É£ Navegando para resultados...');
    const resultTab = document.querySelector('[data-value="resultados"]');
    if (!resultTab) {
      console.error('‚ùå Aba de resultados n√£o encontrada');
      return;
    }
    resultTab.click();
    await new Promise(resolve => setTimeout(resolve, 500));
    console.log('‚úÖ Aba de resultados ativada');

    // 4. Verificar se h√° modelos dispon√≠veis
    console.log('4Ô∏è‚É£ Verificando modelos de exames...');
    const modelSelect = document.querySelector('select[name="examModel"]') || 
                       document.querySelector('[role="combobox"]') ||
                       document.querySelector('button[role="combobox"]');
    
    if (!modelSelect) {
      console.error('‚ùå Select de modelos n√£o encontrado');
      return;
    }
    
    // Clicar no select para abrir
    modelSelect.click();
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Verificar se h√° op√ß√µes
    const options = document.querySelectorAll('[role="option"]') || 
                   document.querySelectorAll('option');
    
    if (options.length === 0) {
      console.error('‚ùå Nenhum modelo de exame encontrado');
      return;
    }
    
    console.log(`‚úÖ ${options.length} modelos encontrados`);
    
    // Selecionar o primeiro modelo
    options[0].click();
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log('‚úÖ Modelo selecionado');

    // 5. Verificar se h√° campos de resultado preenchidos
    console.log('5Ô∏è‚É£ Verificando campos de resultado...');
    const textareas = document.querySelectorAll('textarea');
    let hasContent = false;
    
    for (const textarea of textareas) {
      if (textarea.value && textarea.value.trim().length > 0) {
        hasContent = true;
        break;
      }
    }
    
    if (!hasContent) {
      console.log('‚ö†Ô∏è Nenhum campo preenchido, adicionando dados de teste...');
      // Preencher o primeiro textarea encontrado
      if (textareas.length > 0) {
        const firstTextarea = textareas[0];
        firstTextarea.value = 'Hemoglobina: 12.5 g/dL\nHemat√≥crito: 38%\nLeuc√≥citos: 7.200/mm¬≥';
        firstTextarea.dispatchEvent(new Event('input', { bubbles: true }));
        firstTextarea.dispatchEvent(new Event('change', { bubbles: true }));
        console.log('‚úÖ Dados de teste adicionados');
      }
    } else {
      console.log('‚úÖ Campos j√° possuem conte√∫do');
    }

    // 6. Encontrar e clicar no bot√£o de IA
    console.log('6Ô∏è‚É£ Procurando bot√£o de IA...');
    
    // Procurar por diferentes seletores poss√≠veis
    const aiButton = document.querySelector('button:has(svg)') ||
                    Array.from(document.querySelectorAll('button')).find(btn => 
                      btn.textContent.includes('Processar com IA') ||
                      btn.textContent.includes('IA') ||
                      btn.querySelector('svg')
                    );
    
    if (!aiButton) {
      console.error('‚ùå Bot√£o de IA n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Bot√£o de IA encontrado:', aiButton.textContent);

    // 7. Testar a Edge Function diretamente primeiro
    console.log('7Ô∏è‚É£ Testando Edge Function diretamente...');
    
    try {
      const { data, error } = await window.supabase.functions.invoke('ai-webhook', {
        body: {
          examResults: 'Hemoglobina: 12.5 g/dL\nHemat√≥crito: 38%\nLeuc√≥citos: 7.200/mm¬≥',
          prompt: 'Analise estes resultados de exames e forne√ßa uma interpreta√ß√£o m√©dica detalhada.'
        }
      });
      
      if (error) {
        console.error('‚ùå Erro na Edge Function:', error);
      } else {
        console.log('‚úÖ Edge Function funcionando:', data);
      }
    } catch (err) {
      console.error('‚ùå Erro ao chamar Edge Function:', err);
    }

    // 8. Clicar no bot√£o de IA
    console.log('8Ô∏è‚É£ Clicando no bot√£o de IA...');
    aiButton.click();
    
    // 9. Aguardar processamento
    console.log('9Ô∏è‚É£ Aguardando processamento...');
    
    let attempts = 0;
    const maxAttempts = 30; // 30 segundos
    
    while (attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempts++;
      
      // Verificar se o bot√£o ainda est√° processando
      const processingButton = document.querySelector('button:has(.animate-spin)') ||
                              Array.from(document.querySelectorAll('button')).find(btn => 
                                btn.textContent.includes('Processando')
                              );
      
      if (!processingButton) {
        console.log('‚úÖ Processamento conclu√≠do!');
        break;
      }
      
      console.log(`‚è≥ Processando... (${attempts}/${maxAttempts})`);
    }
    
    if (attempts >= maxAttempts) {
      console.error('‚ùå Timeout: Processamento demorou mais que 30 segundos');
      return;
    }

    // 10. Verificar resultado final
    console.log('üîü Verificando resultado final...');
    const finalResultTextarea = document.querySelector('#examResults') ||
                                document.querySelector('textarea[placeholder*="Resultado final"]') ||
                                Array.from(document.querySelectorAll('textarea')).find(ta => 
                                  ta.placeholder && ta.placeholder.includes('final')
                                );
    
    if (finalResultTextarea && finalResultTextarea.value.trim()) {
      console.log('‚úÖ SUCESSO! Resultado gerado pela IA:');
      console.log('üìÑ Conte√∫do:', finalResultTextarea.value.substring(0, 200) + '...');
    } else {
      console.error('‚ùå Nenhum resultado foi gerado');
    }

    console.log('üéâ Teste de integra√ß√£o da IA conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testAIIntegration();