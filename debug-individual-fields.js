// Script de debug para monitorar o fluxo de campos individuais (vers√£o com logs)
// Execute no console do navegador ap√≥s fazer login

function debugIndividualFieldsWithLogs() {
  console.log('üîç Iniciando debug completo de campos individuais...');
  
  // Interceptar todas as chamadas para a Edge Function
  const originalFetch = window.fetch;
  window.fetch = async function(...args) {
    const [url, options] = args;
    
    if (url && url.includes && url.includes('ai-webhook')) {
      console.log('\nüöÄ === CHAMADA INTERCEPTADA ===');
      console.log('URL:', url);
      
      const requestBody = options?.body ? JSON.parse(options.body) : null;
      console.log('üì§ Payload enviado:', requestBody);
      
      // Identificar campos din√¢micos enviados
      const dynamicFields = Object.keys(requestBody || {}).filter(key => 
        !['text', 'content', 'type', 'selectedModelTitle', 'timestamp'].includes(key)
      );
      console.log('üéØ Campos din√¢micos enviados:', dynamicFields);
      
      const response = await originalFetch.apply(this, args);
      
      // Clonar resposta para an√°lise
      const clonedResponse = response.clone();
      try {
        const responseData = await clonedResponse.json();
        console.log('\nüì• === RESPOSTA RECEBIDA ===');
        console.log('Status:', response.status);
        console.log('Success:', responseData.success);
        console.log('Processed Content:', responseData.processed_content ? 'Presente' : 'Ausente');
        console.log('Individual Fields:', responseData.individual_fields ? 'Presente' : 'Ausente');
        
        if (responseData.individual_fields) {
          console.log('üéØ Campos individuais na resposta:');
          Object.entries(responseData.individual_fields).forEach(([key, value]) => {
            console.log(`  ${key}: ${value}`);
          });
        } else {
          console.log('‚ö†Ô∏è PROBLEMA: Nenhum campo individual na resposta!');
        }
      } catch (e) {
        console.error('‚ùå Erro ao fazer parse da resposta:', e);
      }
      
      return response;
    }
    
    return originalFetch.apply(this, args);
  };
  
  console.log('‚úÖ Debug ativo. Execute o processamento de IA normalmente.');
  console.log('üìã Logs esperados:');
  console.log('  1. üöÄ Chamada interceptada');
  console.log('  2. üì• Resposta recebida');
  console.log('  3. üîÑ [useAtendimentoHelpers] Callback onSuccess chamado');
  console.log('  4. üéØ [useAtendimentoHelpers] Processando campos individuais');
  console.log('  5. üéØ [NovoAtendimento] handleDynamicFieldsChange chamado');
}

// Fun√ß√£o para testar diretamente o fluxo com logs
async function testIndividualFieldsFlowWithLogs() {
  console.log('üß™ Testando fluxo de campos individuais com logs...');
  
  const testPayload = {
    content: '',
    type: 'exam_result',
    selectedModelTitle: 'Ultrassom Obst√©trico',
    IG: '32 semanas',
    BCF: '140 bpm',
    peso_fetal: '1800g'
  };
  
  console.log('üì§ Enviando:', testPayload);
  
  try {
    const { data, error } = await window.supabase.functions.invoke('ai-webhook', {
      body: testPayload
    });
    
    if (error) {
      console.error('‚ùå Erro:', error);
      return;
    }
    
    console.log('\nüì• Resposta completa:', data);
    
    // Verificar se a resposta tem o formato esperado
    if (data.success) {
      console.log('‚úÖ Processamento bem-sucedido');
      
      if (data.processed_content) {
        console.log('üìÑ Resultado Final presente');
      }
      
      if (data.individual_fields) {
        console.log('üéØ Campos individuais presentes:', Object.keys(data.individual_fields));
        
        // Simular o que deveria acontecer no frontend
        console.log('\nüîÑ Simulando processamento no frontend:');
        console.log('1. updateFormField("resultadoExames", processedContent) - ‚úÖ');
        console.log('2. onIndividualFieldsUpdate(individualFields) - ?');
        console.log('3. handleDynamicFieldsChange(fields) - ?');
        console.log('4. setDynamicFields(fields) - ?');
        
      } else {
        console.log('‚ö†Ô∏è Nenhum campo individual na resposta');
      }
    } else {
      console.log('‚ùå Processamento falhou');
    }
    
  } catch (err) {
    console.error('‚ùå Erro no teste:', err);
  }
}

// Fun√ß√£o para verificar se o N8N est√° retornando campos individuais
async function checkN8NResponse() {
  console.log('üîó Verificando resposta do N8N...');
  
  const webhookUrl = 'https://n8n.mentoriajrs.com/webhook-test/c611aff7-f40b-405e-80fe-3b340a33ec9c';
  
  const testPayload = {
    text: '',
    type: 'exam_result',
    timestamp: new Date().toISOString(),
    selectedModelTitle: 'Ultrassom Obst√©trico',
    IG: '32 semanas',
    BCF: '140 bpm',
    peso_fetal: '1800g'
  };
  
  console.log('üì§ Enviando para N8N:', testPayload);
  
  try {
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Origin': 'https://sistema.saude.app'
      },
      body: JSON.stringify(testPayload)
    });
    
    console.log('üìä Status da resposta N8N:', response.status);
    
    const responseText = await response.text();
    console.log('üì• Resposta bruta do N8N:', responseText);
    
    // Tentar fazer parse da resposta
    try {
      const jsonResponse = JSON.parse(responseText);
      console.log('üìä Resposta JSON do N8N:', jsonResponse);
      
      // Verificar se tem campos individuais
      const hasIndividualFields = Object.keys(jsonResponse).some(key => 
        ['IG', 'BCF', 'peso_fetal', 'apresentacao', 'placenta', 'liquido_amniotico'].includes(key)
      );
      
      if (hasIndividualFields) {
        console.log('‚úÖ N8N est√° retornando campos individuais!');
        console.log('üéØ Campos encontrados:');
        Object.entries(jsonResponse).forEach(([key, value]) => {
          if (['IG', 'BCF', 'peso_fetal', 'apresentacao', 'placenta', 'liquido_amniotico'].includes(key)) {
            console.log(`  ${key}: ${value}`);
          }
        });
      } else {
        console.log('‚ö†Ô∏è N8N N√ÉO est√° retornando campos individuais');
        console.log('üìã Chaves dispon√≠veis:', Object.keys(jsonResponse));
      }
      
    } catch (parseError) {
      console.log('üìù Resposta do N8N √© texto puro:', responseText);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar N8N direto:', error);
  }
}

// Fun√ß√£o para simular resposta ideal do N8N
function simulateIdealN8NResponse() {
  console.log('üé≠ Simulando resposta ideal do N8N...');
  
  const idealResponse = {
    processed_content: 'Exame de ultrassom obst√©trico realizado em gestante de 32 semanas. Feto √∫nico, vivo, em apresenta√ß√£o cef√°lica. Batimentos card√≠acos fetais normais (140 bpm). Peso fetal estimado em 1800g, adequado para idade gestacional.',
    IG: '32 semanas - Idade gestacional compat√≠vel com desenvolvimento fetal adequado',
    BCF: '140 bpm - Frequ√™ncia card√≠aca fetal normal, ritmo regular',
    peso_fetal: '1800g - Peso estimado dentro da normalidade para IG atual'
  };
  
  console.log('üìä Resposta ideal:', idealResponse);
  
  console.log('\nüîÑ Como seria processado:');
  console.log('1. Edge Function extrai campos individuais');
  console.log('2. Retorna: { success: true, processed_content: "...", individual_fields: {...} }');
  console.log('3. useAIProcessing chama onSuccess(processedContent, individualFields)');
  console.log('4. useAtendimentoHelpers chama onIndividualFieldsUpdate(individualFields)');
  console.log('5. NovoAtendimento chama handleDynamicFieldsChange(fields)');
  console.log('6. setDynamicFields atualiza os campos no estado');
  console.log('7. ResultadoExames re-renderiza com os novos valores');
}

console.log('üöÄ Scripts de debug dispon√≠veis:');
console.log('debugIndividualFieldsWithLogs() - Ativa monitoramento completo com logs');
console.log('testIndividualFieldsFlowWithLogs() - Testa fluxo direto com logs');
console.log('checkN8NResponse() - Verifica se N8N retorna campos individuais');
console.log('simulateIdealN8NResponse() - Simula resposta ideal');

// Auto-ativar debug
if (typeof window !== 'undefined' && window.supabase) {
  debugIndividualFieldsWithLogs();
}